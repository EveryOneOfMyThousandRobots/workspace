package hashesandhashes;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.io.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;





public class main {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println(makeNonce());
		Random rng = new Random();
		String r = String.valueOf(rng.nextLong());
		System.out.println(r);
		
		if (args.length == 1) {
			String filename = args[0];
			System.out.println(filename);
			
			String[] lines = getFileLines(filename);
//			String nonce = 
			if (lines.length > 0) {
				ArrayList<String> list = new ArrayList<String>();
//				list.add()
//				writeToFile(filename, list);
				
				
				
			}
		}
		

	}
	
	public static String makeNonce() {
		 String dateTimeString = Long.toString(new Date().getTime());
	        byte[] nonceByte = dateTimeString.getBytes();
	        return toBase64(nonceByte);
	}
	
	
	public static void writeToFile(String filename, List<String> lines) {
		Path file = Paths.get(filename + ".out");
		try {
			Files.write(file, lines, Charset.forName("UTF-8"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static String[] getFileLines(String filename) {
		
		String[] strings = new String[3];
		
		String line;
		BufferedReader filein;
		
		try {
			filein = new BufferedReader(new FileReader(filename));
			strings[0] = filein.readLine();
			strings[1] = filein.readLine();
			strings[2] = filein.readLine();
			
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
		return strings;
		
	
	}
	
	public static String toBase64(String s ) {
			return toBase64(s.getBytes());
	}
	
	public static String toBase64(byte[] bytes) {
		Base64.Encoder b64 = Base64.getEncoder();
		return b64.encodeToString(bytes);
		
	}
	
	public static byte[] fromBase64(String s) {
		Base64.Decoder b64 = Base64.getDecoder();
		return b64.decode(s);
	}

	public static String encode(String s) {
		String base64String="";
//		Base64.Encoder b64 = Base64.getEncoder();
		MessageDigest sha;
		try {
			sha = MessageDigest.getInstance("SHA-1");
			sha.reset();
			sha.update("hammers".getBytes());
			base64String = toBase64(sha.digest());
//			System.out.println(p + " " +p.length());
//			System.out.println(sha.digest().toString());
//			for (int i = 0; i < sha.digest().length; i += 1) {
//				System.out.println(sha.digest()[i]);
//			}
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return base64String;
		
	}
	
	


}
